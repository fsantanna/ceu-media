#ifndef _CEU_MEDIA_MEDIA
#define _CEU_MEDIA_MEDIA

#include "c.ceu"
#include "uv/uv.ceu"
#include "media/raw.ceu"

#define MEDIA_FRAME_RATE 2    // 1 fps

#define PERIOD_US (1000000/MEDIA_FRAME_RATE)
#define NS 1000000
#define FREQ 15

data Region with
    var int x;
    var int y;
    var int z;
    var int width;
    var int height;
end

data Size with
  var int width;
  var int height;
end

data Media;

data Media.Text with
    vector[] byte   text;
    vector[] byte   font;
    var      Region region;
    var      uint   color;
end

data Media.Image with
    vector[] byte   uri;
    var      Region region;
    var      float  alpha;
end

data Media.Audio with
    vector[] byte  uri;
    var      float volume;
end

data Media.Video with
    vector[] byte   uri;
    var      Region region;
    var      float  alpha;
    var      float  volume;
end

data IScene with
    var&  _lp_Scene              ref;
    var&  Size?                  size;
    event (int, int, int, bool)  ok_mouse_clicked;
    event (int, int)             ok_mouse_moved;
    event (_char_ptr_ext, bool)  ok_keyed;
#if 0
    event (_char_ptr_ext) error_event;
    event (void) quit;
#endif
end

#if 0
  /* Scene functions */
  function (uint) => void advance_time;
  function (void) => _lp_Scene && getptr;
#endif

code/await Scene (var Size? size, var bool auto_advance)
                    => (var& IScene scene)
                        => void
do
    var int w=0, h=0;
    if size? then
        w = size!.width;
        h = size!.height;
    end

    var&? _lp_Scene ref_ = &_lp_scene_new(w, h)
        finalize (ref_) with
            _g_object_unref (_G_OBJECT(&&ref_!));
        end;

    var& _lp_Scene ref = &ref_!;

    var IScene scene_ = val IScene(&ref_!,&size,_,_,_);
    scene = &scene_;

    _g_object_set (&&ref, "slave-audio", true, null);
    _g_object_set (&&ref, "lockstep",    true, null);

    spawn do
        async (ref) do
            loop do
                var _lp_Event &&evt;
                evt = _lp_scene_receive (&&ref, false);
                if evt != null then
                    emit LP_EVENT(_lp_event_get_source(evt), evt);
                end
            end
        end
        await FOREVER;
    end

    par/or do
        await FOREVER;
    with
        if auto_advance == true then
            every FREQ ms do
                _lp_scene_advance(&&ref, FREQ * NS);
            end
        else
            await FOREVER;
        end
    with
        loop do
            var _GObject&&  source;
            var _lp_Event&& evt;
            (source, evt) = await LP_EVENT until (_LP_SCENE(source) == &&ref);

            var _GType type = _G_OBJECT_TYPE (evt);

            /* MOUSE */

            if type == _LP_TYPE_EVENT_POINTER_CLICK then
                var _lp_EventPointerClick&& evt_ = _LP_EVENT_POINTER_CLICK(evt);

// TODO: (x,y) sao "float"?
//  - mudei os eventos internos p/ "int"

                var f64 x=_, y=_;
                var int button=_, pressed=_;
                _g_object_get(
                    _G_OBJECT(evt_),
                    "x", &&x,
                    "y", &&y,
                    "button", &&button,
                    "press", &&pressed,
                    null,
                );

                emit scene_.ok_mouse_clicked(x as int, y as int,
                                             button, pressed as bool);
            else/if type == _LP_TYPE_EVENT_POINTER_MOVE then
                var _lp_EventPointerMove&& evt_ = _LP_EVENT_POINTER_MOVE(evt);

                var f64 x=_, y=_;
                _g_object_get(_G_OBJECT(evt_), "x",&&x, "y",&&y, null);

                emit scene_.ok_mouse_moved(x as int, y as int);

            /* KEY */

            else/if type == _LP_TYPE_EVENT_KEY then
                var _lp_EventKey&& evt_ = _LP_EVENT_KEY(evt);

                var _char_ptr_ext key     = _;
                var int           pressed = _;
                _g_object_get(
                    _G_OBJECT(evt_),
                    "key",   &&key,
                    "press", &&pressed,
                    null
                );
                do finalize with
                    _g_free (key);
                end

                emit scene_.ok_keyed(key, pressed as bool);
            end
        end
    end

    await FOREVER;

#if 0
  par/or do
    loop do
      var _GObject &&source;
      var _lp_Event &&evt;
      (source, evt) = await LP_EVENT until (_LP_IS_SCENE(source) and
                                          _LP_SCENE(source) == &&scene!);
      var _GType type = _G_OBJECT_TYPE (evt);
      else/if type == _LP_TYPE_EVENT_ERROR then
        var _lp_EventError &&evtError = _UNSAFE(_LP_EVENT_ERROR(evt));
        var _GError &&err = null;
        var _charptr msg = null;

        _g_object_get (_G_OBJECT(evtError), "error", &&err, null);
        msg = _lp_event_to_string (_LP_EVENT(evtError));

        emit error_event => (msg);

        finalize with
          _g_free (msg);
        end
      end
    end
  with
    await quit;
  end
  function (uint value) => void advance_time do
    if auto_advance == false then
      _lp_scene_advance (&&scene!, value);
    end
  end
#endif
end

data IPlay with
    event void      ok;
    var&  _lp_Media ref;
end

code/tight/dynamic
Play_New (var& IScene scene, dynamic var& Media media) => _lp_Media&&;

code/tight/dynamic
Play_Set_Media (var& IPlay play, dynamic var& Media media) => void;

code/tight
Play_Set_Char (var& IPlay play, var _char&& name, var _char&& value) => void;

code/tight
Play_Set_Int (var& IPlay play, var _char&& name, var int value) => void;

code/tight
Play_Get_Int (var& IPlay play, var _char&& name) => int;

#include "media/aux.ceu"

code/await Play (var& IScene scene, var& Media media)
                    => (var& IPlay play)
                        => void
do
    var&? _lp_Media ref = &call/dynamic Play_New(&scene, &media)
        finalize (ref) with
            // TODO: who destroys?
        end;

    var IPlay play_ = val IPlay(_, &ref!);
    play = &play_;

    call/dynamic Play_Set_Media(&play_, &media);

    do
        _lp_media_start(&&play_.ref);
    finalize (play_.ref) with
        _lp_media_stop(&&play_.ref);
    end

    loop do
        var _GObject&&  source;
        var _lp_Event&& evt;
        (source, evt) = await LP_EVENT until (_LP_MEDIA(source) == &&play_.ref);

        var _GType type = _G_OBJECT_TYPE(evt);
        if type == _LP_TYPE_EVENT_START then
            emit play_.ok;
        else/if type == _LP_TYPE_EVENT_STOP then
            break;
        end
    end
end

#if 0
class Player with
  var Scene   &scene;
  var Media   media;

  /* functions */
  function (Media m, Scene &s) => Player play;
  function (Region r) => void set_region_bounds;
  function (int, int, int, int) => void set_bounds;
  function (char && name, float value) => void set_property_float;
  function (char && name, int value) => void set_property_int;
  function (char && name, bool value) => void set_property_bool;
  function (char && name, char && value) => void set_property_char;
  function (char && name) => float get_property_float;
  function (char && name) => int get_property_int;
  function (char && name) => bool get_property_bool;

  /* events */
  event (void) start;
  event (void) stop;
do
  _lp_media_start (&&m!);
  loop do
    var _GObject &&source;
    var _lp_Event &&evt;
    (source, evt) = await LP_EVENT
                  until (_LP_IS_MEDIA(source) and _LP_MEDIA(source) == &&this.m!);
    var _GType type = _G_OBJECT_TYPE (evt);
    if type == _LP_TYPE_EVENT_START then
      emit start;
    else/if type == _LP_TYPE_EVENT_STOP then
      emit stop;
      break;
    end
  end

  escape 0;

  /* function definitions */
  function (Media m, Scene &s) => Player play do
    this.scene = &s;
    this.media = m;
  end

  function (Region r) => void set_region_bounds do
    _g_object_set (&&this.m!, "x", r.x, "y", r.y,
            "width", r.width, "height", r.height, null);
  end

  function (int x, int y, int width, int height) => void set_bounds do
    _g_object_set (&&this.m!, "x", x, "y", y,
            "width", width, "height", height, null);
  end

  function (char&& name, float value) => void set_property_float do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name, int value) => void set_property_int do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name, bool value) => void set_property_bool do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name, char&& value) => void set_property_char do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name) => bool get_property_bool do
    var bool value = false;
    _g_object_get (&&this.m!, name, &&value, null);
    return value;
  end

  function (char&& name) => float get_property_float do
    var float value = 0.0;
    _g_object_get (&&this.m!, name, &&value, null);
    return value;
  end
end
#endif

#endif
