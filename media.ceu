#include "raw.ceu"
native/pre do
    ##include <play.h>
    ##include <stdlib.h>
    
    lp_event_t *new_event_start ()
    {
      lp_event_t *evt = malloc (sizeof (lp_event_t));
      evt->type = LP_EVENT_START;
      return evt;
    }
end

#define MEDIA_FRAME_RATE 2    // 1 fps

#define PERIOD_US (1000000/MEDIA_FRAME_RATE)


/****************     INTERFACES   *********************/
data Rect_Z with
    var int x;
    var int y;
    var int width;
    var int height;
    var int z;
end

class Scene with
  var int width;
  var int height;
  function (void) => _lp_media_t && getptr;
do
  var _lp_media_t &?scene;
  finalize
    this.scene = &_lp_media_create (null);
  with
    _lp_media_destroy (&&scene!);
  end
    
  var _lp_event_t &?evt;
  finalize
    evt = &_new_event_start ();
  with
    _free (&&evt!);
  end
  _lp_media_set_property_int (&&scene!, "width", this.width);
  _lp_media_set_property_int (&&scene!, "height", this.height);
  _lp_media_post (&&scene!, &&evt!);
  
  function (void) => _lp_media_t && getptr do
    return &&scene!;
  end

  await FOREVER;
end


interface Media with
    var char[]&   uri;
    var Rect_Z&   region;
    var Scene&    scene;
end

class VideoMedia with
    interface Media;
do
  var _lp_media_t &?m;
  finalize
    m = &_lp_media_create_for_parent (this.scene.getptr(), _UNSAFE(&&this.uri));
  with
    _lp_media_destroy (&&m!);
  end
  var _lp_event_t &?evt;
  finalize
    evt = &_new_event_start ();
  with 
    _free (&&evt!);
  end

  _lp_media_set_property_int (&&m!, "x", region.x);
  _lp_media_set_property_int (&&m!, "y", region.y);
  _lp_media_set_property_int (&&m!, "width", region.width);
  _lp_media_set_property_int (&&m!, "height", region.height);
  _lp_media_set_property_int (&&m!, "z", region.z);
    
  _lp_media_post (&&m!, &&evt!);
  finalize with
    _lp_media_remove_child (this.scene.getptr(), &&m!);
  end
 
 await FOREVER;
end

class ImageMedia with
    interface Media;
do
    // shows the image inside the rectangle

    _printf("%-15s | START\n", &&this.uri);
    finalize with
        _printf("%-15s | STOP\n", &&this.uri);
    end
    await FOREVER;
end

/**************** GLOBAL VARIABLES *********************/
/* var int argc; */
/* var char && &&argv; */
/* (argc, argv) = await OS_START; */

/* if argc < 2 then */
/*   _printf ("Usage: %s URI\n", _ELEM_N (argv, 0)); */
/*   escape 0; */
/* end */


/****************       BODY       *********************/
spawn do
  watching 10s do
    every 1s do
      _printf ("1s\n");
    end
  end
  await FOREVER;
end
