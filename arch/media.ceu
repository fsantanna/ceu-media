#include "raw.ceu"

#define MEDIA_FRAME_RATE 2    // 1 fps

#define PERIOD_US (1000000/MEDIA_FRAME_RATE)
#define NS 1000000
#define FREQ 15

data Rect with
  var int x;
  var int y;
  var int width;
  var int height;
end

data Media with
  tag VIDEO with
    var _charptr uri;
    var int x;
    var int y;
    var int width;
    var int height;
    var int z;
    var float alpha;
    var float volume;
  end

  or

  tag IMAGE with
    var _charptr uri;
    var int x;
    var int y;
    var int width;
    var int height;
    var int z;
    var float alpha;
  end

  or

  tag AUDIO with
    var _charptr uri;
    var float volume;
  end 

  or

  tag TEXT with
    var _charptr text;
    var _charptr font_desc;
    var uint color;
    var int x;
    var int y;
    var int width;
    var int height;
    var int z;
  end
end

class Scene with
  var int width;
  var int height;

  /* Scene functions */
  function (void) => _lp_Scene && getptr;

  /* Scene events */
  event (f64, f64, int, int) mouse_click_event;
  event (f64, f64) mouse_move_event;
  event (_charptr, int) key_event;
do
  var _lp_Scene &?scene;
  finalize
    scene = &_lp_scene_new (width, height);
  with
    _g_object_unref (_G_OBJECT(&&scene!));
  end

  _g_object_set (&&scene!, "slave-audio", true, null);
  _g_object_set (&&scene!, "lockstep", true, null);
    
  function (void) => _lp_Scene && getptr do
    return &&scene!;
  end

  spawn do
    async (scene) do
      loop do 
        var _lp_Event &&evt;
        evt = _UNSAFE(_lp_scene_receive (&&scene!, false)); 
        if evt != null then
          emit LP_EVENT => (_UNSAFE(_lp_event_get_source(evt)), evt);
        end
      end
    end
    await FOREVER;
  end

  spawn do
    loop do
      var _GObject &&source;
      var _lp_Event &&evt;
      (source, evt) = await LP_EVENT until (_LP_IS_SCENE(source) and 
                                          _LP_SCENE(source) == &&scene!);
      var _GType type = _G_OBJECT_TYPE (evt);
      if type == _LP_TYPE_EVENT_POINTER_CLICK then
        var _lp_EventPointerClick &&evtPointerClick = 
                                      _UNSAFE(_LP_EVENT_POINTER_CLICK (evt));
        var f64 x = 0, y = 0;
        var int button = 0, press = 0;
        
        _g_object_get (_G_OBJECT(evtPointerClick), "x", &&x, "y", &&y,
                      "button", &&button, "press", &&press, null);
        
        emit mouse_click_event => (x, y, button, press);
      else/if type == _LP_TYPE_EVENT_POINTER_MOVE then
        var _lp_EventPointerMove &&evtPointerMove = 
                                      _UNSAFE(_LP_EVENT_POINTER_MOVE (evt));
        var f64 x = 0, y = 0;
        
        _g_object_get (_G_OBJECT(evtPointerMove), "x", &&x, "y", &&y, null);
        
        emit mouse_move_event => (x, y);
      else/if type == _LP_TYPE_EVENT_KEY then
        var _lp_EventKey &&evtKey = _UNSAFE(_LP_EVENT_KEY(evt));
        var _charptr key = null;
        var int press = 0;
        _g_object_get (_G_OBJECT(evtKey), "key", &&key, 
                                          "press", &&press, null);
        emit key_event => (key, press);

        finalize with
          _g_free (key);
        end
      end
    end
  end

  every FREQ ms do
    _lp_scene_advance (&&scene!, FREQ * NS);
  end
end

class Player with
  var Scene   &scene;
  var Media   media;

  /* functions */
  function (Media m, Scene &s) => Player play;
  function (Rect r) => void setRectBounds;
  function (int, int, int, int) => void setBounds;
  function (char && name, float value) => void setPropertyFloat;
  function (char && name, int value) => void setPropertyInt;
  function (char && name, bool value) => void setPropertyBool;
  function (char && name) => float getPropertyFloat;
  function (char && name) => int getPropertyInt;
  function (char && name) => bool getPropertyBool;

  /* events */
  event (void) start;
  event (void) stop;
do
  var _charptr value = null;
  if media.VIDEO then
    value = media.VIDEO.uri;
  else/if media.IMAGE then
    value = media.IMAGE.uri;
  else/if media.AUDIO then
    value = media.AUDIO.uri;
  else/if media.TEXT then
    value = media.TEXT.text;
  end

  var _lp_Media &?m;
  if not media.TEXT then
    finalize
      m = &_lp_media_new (scene.getptr(), _UNSAFE(value));
    with
      _lp_media_stop (&&m!);
    end
  else
    finalize
      m = &_lp_media_text_new (scene.getptr(), _UNSAFE(value));
    with
      _lp_media_stop (&&m!);
    end
  end

  if media.VIDEO then
    _g_object_set (_G_OBJECT(&&m!), "x", media.VIDEO.x, "y", media.VIDEO.y,
                  "width", media.VIDEO.width, "height", media.VIDEO.height,
                  "z", media.VIDEO.z, "alpha", media.VIDEO.alpha,
                  "volume", media.VIDEO.volume, null);
  else/if media.IMAGE then
    _g_object_set (_G_OBJECT(&&m!), "x", media.IMAGE.x, "y", media.IMAGE.y,
                  "width", media.IMAGE.width, "height", media.IMAGE.height,
                  "z", media.IMAGE.z, "alpha", media.IMAGE.alpha, null);
  else/if media.AUDIO then
    _g_object_set (_G_OBJECT(&&m!), "volume", media.AUDIO.volume, null);
  else/if media.TEXT then
    _g_object_set (_G_OBJECT(&&m!), "text", media.TEXT.text, 
                  "font-desc", media.TEXT.font_desc, 
                  "text-color", media.TEXT.color,
                  "x", media.TEXT.x, "y", media.TEXT.y,
                  "width", media.TEXT.width, "height", media.TEXT.height,
                  "z", media.TEXT.z,  null);
  end

  _lp_media_start (&&m!);
  loop do
    var _GObject &&source;
    var _lp_Event &&evt;
    (source, evt) = await LP_EVENT 
                  until (_LP_IS_MEDIA(source) and _LP_MEDIA(source) == &&this.m!);
    var _GType type = _G_OBJECT_TYPE (evt);
    if type == _LP_TYPE_EVENT_START then
      emit start;
    else/if type == _LP_TYPE_EVENT_STOP then
      emit stop;
      break;
    end
  end

  /* function definitions */
  function (Media m, Scene &s) => Player play do
    this.scene = &s;
    this.media = m;
  end

  function (Rect r) => void setRectBounds do
    _g_object_set (&&this.m!, "x", r.x, "y", r.y, 
            "width", r.width, "height", r.height, null);
  end

  function (int x, int y, int width, int height) => void setBounds do
    _g_object_set (&&this.m!, "x", x, "y", y, 
            "width", width, "height", height, null);
  end
  
  function (char&& name, float value) => void setPropertyFloat do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name, int value) => void setPropertyInt do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name, bool value) => void setPropertyBool do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name) => int getPropertyInt do
    var int value = 0;
    _g_object_get (&&this.m!, name, &&value, null);
    return value;
  end

  function (char&& name) => bool getPropertyBool do
    var bool value = false;
    _g_object_get (&&this.m!, name, &&value, null);
    return value;
  end

  function (char&& name) => float getPropertyFloat do
    var float value = 0.0;
    _g_object_get (&&this.m!, name, &&value, null);
    return value;
  end
end

/* class Media with */
/*     var char&     uri; */
/*     var Scene&    scene; */
/*     var _lp_Media &?m; */

/*     function (void) => _lp_Media& init; */
/*     function (Rect r) => void setRectBounds; */
/*     function (int, int, int, int) => void setBounds; */
/*     function (char && name, float value) => void setPropertyFloat; */
/*     function (char && name, int value) => void setPropertyInt; */
/*     function (char && name) => float getPropertyFloat; */
/*     function (char && name) => int getPropertyInt; */

/*     event (void) start; */
/*     event (void) stop; */
/* do */
/*   _lp_media_start (&&this.m!); */
/*   finalize with */
/*     _lp_media_stop (&&this.m!); */
/*   end */

/*   loop do */
/*     var _GObject &&source; */
/*     var _lp_Event &&evt; */
/*     (source, evt) = await LP_EVENT */ 
/*                   until (_LP_IS_MEDIA(source) and _LP_MEDIA(source) == &&this.m!); */
/*     var _GType type = _G_OBJECT_TYPE (evt); */
/*     if type == _LP_TYPE_EVENT_START then */
/*       emit start; */
/*     else/if type == _LP_TYPE_EVENT_STOP then */
/*       emit stop; */
/*       break; */
/*     end */
/*   end */

/*   function (void) => _lp_Media& init do */
/*     return &_lp_media_new (this.scene.getptr(), _UNSAFE(&&this.uri)); */
/*   end */

/*   function (Rect r) => void setRectBounds do */
/*     _g_object_set (&&this.m!, "x", r.x, "y", r.y, */ 
/*             "width", r.width, "height", r.height, null); */
/*   end */

/*   function (int x, int y, int width, int height) => void setBounds do */
/*     _g_object_set (&&this.m!, "x", x, "y", y, */ 
/*             "width", width, "height", height, null); */
/*   end */
  
/*   function (char&& name, float value) => void setPropertyFloat do */
/*     _g_object_set (&&this.m!, name, value, null); */
/*   end */

/*   function (char&& name, int value) => void setPropertyInt do */
/*     _g_object_set (&&this.m!, name, value, null); */
/*   end */

/*   function (char&& name) => int getPropertyInt do */
/*     var int value = 0; */
/*     _g_object_get (&&this.m!, name, &&value, null); */
/*     return value; */
/*   end */

/*   function (char&& name) => float getPropertyFloat do */
/*     var float value = 0.0; */
/*     _g_object_get (&&this.m!, name, &&value, null); */
/*     return value; */
/*   end */
/* end */

