#include "raw.ceu"

native/pre do
    ##include <play.h>
    ##include <stdlib.h>
end

#define MEDIA_FRAME_RATE 2    // 1 fps

#define PERIOD_US (1000000/MEDIA_FRAME_RATE)
#define NS 1000000
#define FREQ 15

data Rect with
    var int x;
    var int y;
    var int width;
    var int height;
end

class Scene with
  var int width;
  var int height;

  /* Scene functions */
  function (void) => _lp_Scene && getptr;

  /* Scene events */
  event (f64, f64, int, int) mouse_button_event;
do
  var _lp_Scene &?scene;
  finalize
    scene = &_lp_scene_new (width, height);
  with
    _g_object_unref (_G_OBJECT(&&scene!));
  end

  _g_object_set (&&scene!, "lockstep", true, null);
    
  function (void) => _lp_Scene && getptr do
    return &&scene!;
  end

  spawn do
    async (scene) do
      loop do 
        var _lp_Event &&evt;
        evt = _UNSAFE(_lp_scene_receive (&&scene!, false)); 
        if evt != null then
          emit LP_EVENT => (_UNSAFE(_lp_event_get_source(evt)), evt);
        end
      end
    end
    await FOREVER;
  end

  spawn do
    loop do
      var _GObject &&source;
      var _lp_Event &&evt;
      (source, evt) = await LP_EVENT until (_LP_IS_SCENE(source) and 
                                          _LP_SCENE(source) == &&scene!);
      var _GType type = _G_OBJECT_TYPE (evt);
      if type == _LP_TYPE_EVENT_MOUSE_BUTTON then
        var _lp_EventMouseButton &&evtMouseButton = 
                                      _UNSAFE(_LP_EVENT_MOUSE_BUTTON (evt));
        var f64 x = 0, y = 0;
        var int button = 0, press = 0;
        
        _g_object_get (_G_OBJECT(evtMouseButton), "x", &&x, "y", &&y,
                      "button", &&button, "press", &&press, null);
        
        emit mouse_button_event => (x, y, button, press);
      end
    end
  end

  every FREQ ms do
    _lp_scene_advance (&&scene!, FREQ * NS);
  end
end

class Media with
    var char&     uri;
    var Scene&    scene;
    var _lp_Media &?m;

    function (void) => _lp_Media& init;
    function (Rect r) => void setRectBounds;
    function (int, int, int, int) => void setBounds;
    function (char && name, float value) => void setPropertyFloat;
    function (char && name, int value) => void setPropertyInt;

    event (void) start;
    event (void) stop;
do
  _lp_media_start (&&this.m!);
  finalize with
    _lp_media_stop (&&this.m!);
  end

  loop do
    var _GObject &&source;
    var _lp_Event &&evt;
    (source, evt) = await LP_EVENT 
                  until (_LP_IS_MEDIA(source) and _LP_MEDIA(source) == &&this.m!);
    var _GType type = _G_OBJECT_TYPE (evt);
    if type == _LP_TYPE_EVENT_START then
      emit start;
    else/if type == _LP_TYPE_EVENT_STOP then
      emit stop;
      break;
    end
  end

  function (void) => _lp_Media& init do
    return &_lp_media_new (this.scene.getptr(), _UNSAFE(&&this.uri));
  end

  function (Rect r) => void setRectBounds do
    _g_object_set (&&this.m!, "x", r.x, "y", r.y, 
            "width", r.width, "height", r.height, null);
  end

  function (int x, int y, int width, int height) => void setBounds do
    _g_object_set (&&this.m!, "x", x, "y", y, 
            "width", width, "height", height, null);
  end
  
  function (char&& name, float value) => void setPropertyFloat do
    _g_object_set (&&this.m!, name, value, null);
  end

  function (char&& name, int value) => void setPropertyInt do
    _g_object_set (&&this.m!, name, value, null);
  end
end

